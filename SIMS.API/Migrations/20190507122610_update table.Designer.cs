// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SIMS.API.Data;

namespace SIMS.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190507122610_update table")]
    partial class updatetable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SIMS.API.Models.BachelorsMentor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MentorName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BachelorsMentor");
                });

            modelBuilder.Entity("SIMS.API.Models.BachelorsProjectAdvisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdvisorName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BachelorsProjectAdvisor");
                });

            modelBuilder.Entity("SIMS.API.Models.BachelorsThesisAdvisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdvisorName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BachelorsThesisAdvisor");
                });

            modelBuilder.Entity("SIMS.API.Models.Course", b =>
                {
                    b.Property<int>("uuid")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MaxStudent");

                    b.Property<string>("courseNum");

                    b.Property<string>("courseTitle");

                    b.Property<int>("creditHours");

                    b.Property<string>("crn");

                    b.Property<string>("instructor");

                    b.Property<string>("notes");

                    b.Property<string>("room");

                    b.Property<string>("scheduleEndTime");

                    b.Property<string>("scheduleStartTime");

                    b.Property<int>("scheduleType");

                    b.Property<int>("section");

                    b.Property<int>("semesterId");

                    b.Property<string>("weekday");

                    b.HasKey("uuid");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SIMS.API.Models.DoctorateAdvisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdvisorName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DoctorateAdvisor");
                });

            modelBuilder.Entity("SIMS.API.Models.DoctorateCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("FormDate");

                    b.Property<string>("Member1");

                    b.Property<string>("Member2");

                    b.Property<string>("Member3");

                    b.Property<string>("Member4");

                    b.Property<string>("Member5");

                    b.Property<string>("Member6");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DoctorateCommittee");
                });

            modelBuilder.Entity("SIMS.API.Models.ExitSurvey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("assessComment");

                    b.Property<string>("assessQ1");

                    b.Property<string>("assessQ2");

                    b.Property<string>("assessQ3");

                    b.Property<string>("contact1Address");

                    b.Property<string>("contact1Email");

                    b.Property<string>("contact1Name");

                    b.Property<string>("contact1PhoneCell");

                    b.Property<string>("contact1PhoneHome");

                    b.Property<string>("contact1PhoneWork");

                    b.Property<string>("contact2Address");

                    b.Property<string>("contact2Email");

                    b.Property<string>("contact2Name");

                    b.Property<string>("contact2PhoneCell");

                    b.Property<string>("contact2PhoneHome");

                    b.Property<string>("contact2PhoneWork");

                    b.Property<string>("contactOtherOption");

                    b.Property<string>("degreeProgram");

                    b.Property<string>("furtherStudyMajor");

                    b.Property<string>("furtherStudyScholarship");

                    b.Property<string>("furtherStudySchool");

                    b.Property<string>("jobCity");

                    b.Property<string>("jobCompany");

                    b.Property<string>("jobCompanyContact");

                    b.Property<string>("jobCompanyWeb");

                    b.Property<string>("jobSalary");

                    b.Property<string>("jobSearchAvgSalary");

                    b.Property<string>("jobSearchDuration");

                    b.Property<string>("jobSearchNumInterview");

                    b.Property<string>("jobSearchNumOffer");

                    b.Property<string>("jobTitle");

                    b.Property<string>("networkingQ1");

                    b.Property<string>("networkingQ2");

                    b.Property<string>("ssId");

                    b.Property<string>("studentName");

                    b.Property<DateTime>("surveyDate");

                    b.Property<string>("termGraDuateSemester");

                    b.Property<string>("termGraDuateYear");

                    b.HasKey("Id");

                    b.ToTable("ExitSurveys");
                });

            modelBuilder.Entity("SIMS.API.Models.GradSeniorSurvey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Obj1");

                    b.Property<string>("Obj2");

                    b.Property<string>("Obj3");

                    b.Property<string>("Obj4");

                    b.Property<string>("Obj5");

                    b.Property<string>("Outcome1");

                    b.Property<string>("Outcome10");

                    b.Property<string>("Outcome2");

                    b.Property<string>("Outcome3");

                    b.Property<string>("Outcome4");

                    b.Property<string>("Outcome5");

                    b.Property<string>("Outcome6");

                    b.Property<string>("Outcome7");

                    b.Property<string>("Outcome8");

                    b.Property<string>("Outcome9");

                    b.Property<string>("degreeProgram");

                    b.Property<DateTime>("surveyDate");

                    b.Property<string>("termGraduateSemester");

                    b.Property<string>("termGraduateYear");

                    b.HasKey("Id");

                    b.ToTable("GradSeniorSurveys");
                });

            modelBuilder.Entity("SIMS.API.Models.MastersCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("FormDate");

                    b.Property<string>("Member1");

                    b.Property<string>("Member2");

                    b.Property<string>("Member3");

                    b.Property<string>("Member4");

                    b.Property<string>("Member5");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MastersCommittee");
                });

            modelBuilder.Entity("SIMS.API.Models.MastersProjectAdvisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdvisorName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MastersProjectAdvisor");
                });

            modelBuilder.Entity("SIMS.API.Models.MastersThesisAdvisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdvisorName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MastersThesisAdvisor");
                });

            modelBuilder.Entity("SIMS.API.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Description");

                    b.Property<bool>("IsMain");

                    b.Property<string>("Url");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("SIMS.API.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("SIMS.API.Models.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("From");

                    b.Property<string>("SemesterTime");

                    b.Property<string>("To");

                    b.HasKey("Id");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("SIMS.API.Models.ThesisProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("docType");

                    b.Property<string>("fileName");

                    b.Property<string>("studentName");

                    b.Property<string>("topic");

                    b.Property<string>("url");

                    b.HasKey("Id");

                    b.ToTable("ThesisProjects");
                });

            modelBuilder.Entity("SIMS.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime>("BachelorsGradDate");

                    b.Property<string>("BachelorsMentor");

                    b.Property<string>("BachelorsProjectAdvisor");

                    b.Property<string>("BachelorsProjectTitle");

                    b.Property<DateTime>("BachelorsStartDate");

                    b.Property<string>("BachelorsThesisAdvisor");

                    b.Property<string>("BachelorsThesisTitle");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<string>("Current");

                    b.Property<string>("CurrentAcademicLevel");

                    b.Property<string>("CurrentProgram");

                    b.Property<DateTime>("DateAcceptedForCandidacy");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Degree");

                    b.Property<string>("DegreeProgram");

                    b.Property<string>("Designation");

                    b.Property<DateTime>("DissertationDefenseDate");

                    b.Property<string>("DissertationTitle");

                    b.Property<string>("DoctoralCandidate");

                    b.Property<string>("DoctorateAdvisor");

                    b.Property<DateTime>("DoctorateCommFormDate");

                    b.Property<string>("DoctorateCommMember1");

                    b.Property<string>("DoctorateCommMember2");

                    b.Property<string>("DoctorateCommMember3");

                    b.Property<string>("DoctorateCommMember4");

                    b.Property<string>("DoctorateCommMember5");

                    b.Property<string>("DoctorateCommMember6");

                    b.Property<DateTime>("DoctorateGradDate");

                    b.Property<DateTime>("DoctorateStartDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("ExternalAdvisor");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime>("MastersCommFormedDate");

                    b.Property<string>("MastersCommMember1");

                    b.Property<string>("MastersCommMember2");

                    b.Property<string>("MastersCommMember3");

                    b.Property<string>("MastersCommMember4");

                    b.Property<string>("MastersCommMember5");

                    b.Property<DateTime>("MastersDefenseDate");

                    b.Property<string>("MastersFocus");

                    b.Property<DateTime>("MastersGradDate");

                    b.Property<string>("MastersProjectAdvisor");

                    b.Property<string>("MastersProjectTitle");

                    b.Property<DateTime>("MastersStartDate");

                    b.Property<string>("MastersThesisAdvisor");

                    b.Property<string>("MastersThesisTitle");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("Notes");

                    b.Property<string>("Office");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PhoneNumber2");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ResearchInterest");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<string>("Title");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SIMS.API.Models.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("SIMS.API.Models.faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("current");

                    b.Property<string>("designation");

                    b.Property<string>("email");

                    b.Property<string>("first_name");

                    b.Property<string>("homepage");

                    b.Property<string>("last_name");

                    b.Property<string>("office");

                    b.Property<string>("phone");

                    b.Property<string>("research_interest");

                    b.Property<string>("title");

                    b.Property<string>("username");

                    b.HasKey("Id");

                    b.ToTable("faculty");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("SIMS.API.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SIMS.API.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SIMS.API.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SIMS.API.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIMS.API.Models.BachelorsMentor", b =>
                {
                    b.HasOne("SIMS.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIMS.API.Models.BachelorsProjectAdvisor", b =>
                {
                    b.HasOne("SIMS.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIMS.API.Models.BachelorsThesisAdvisor", b =>
                {
                    b.HasOne("SIMS.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIMS.API.Models.DoctorateAdvisor", b =>
                {
                    b.HasOne("SIMS.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIMS.API.Models.DoctorateCommittee", b =>
                {
                    b.HasOne("SIMS.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIMS.API.Models.MastersCommittee", b =>
                {
                    b.HasOne("SIMS.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIMS.API.Models.MastersProjectAdvisor", b =>
                {
                    b.HasOne("SIMS.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIMS.API.Models.MastersThesisAdvisor", b =>
                {
                    b.HasOne("SIMS.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIMS.API.Models.Photo", b =>
                {
                    b.HasOne("SIMS.API.Models.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIMS.API.Models.UserRole", b =>
                {
                    b.HasOne("SIMS.API.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIMS.API.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
